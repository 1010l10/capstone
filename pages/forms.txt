import Head from "next/head";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useRouter } from "next/router";
import { motion as m } from "framer-motion";
import { useState } from "react";
import FormLayout from "../components/FormLayout";

export default function Forms() {
  const [description, setDescription] = useState("");
  const router = useRouter();
  const [showOptions, setShowOptions] = useState(false);
  

  const toggleOptions = () => {
    setShowOptions(!showOptions);
  };

  const options = [
    "Log Analysis",
    "System and Network Administration",
    "Reverse Engineering",
    "Programming", 
    "volunerabilities",
    "Skill vary by individual challenge", 
    "other",
];

  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      country: "United States",
      description: "",
      date: "",
      ongoingEvent: false,
      selectedOptions: [],
      feeType: "Free",
      feeType: "",
      photo: null, 
    },

    validationSchema: Yup.object({
      name: Yup.string().max(50).required("Name is required"),
      email: Yup.string().email("Invalid email address").required("Email is required"),
      description: Yup.string(),
      date: Yup.date().required("Date is required"),
      ongoingEvent: Yup.boolean(),
      selectedOptions: Yup.array().min(1, "Select at least one option"),
      photo: Yup.mixed(),
    }),
    
    

    onSubmit: (values) => {
      // This function will only be called if the form is valid
      console.log("Form is valid, submitting...");
      console.log(values);
      router.push({ pathname: "/success", query: values });
    },
    
  });

  return (
    <FormLayout withTailwind={true}>
    <m.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="absolute w-full"
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="  h-screen items-center flex justify-center">
        <form
          onSubmit={formik.handleSubmit}
          className="bg-white flex rounded-lg w-1/2 font-latoRegular"
        >
          <div className="flex-1 text-gray-700  p-20">
            <h1 className="text-3xl pb-2 font-latoBold">
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              <br></br>
              Let's get started ðŸ‘‹
            </h1>
            <p className="text  text-gray-500">
              Our team will carefully evaluate your application, and if it meets our criteria, 
              expect to receive an email containing further details.
              Please provide a comprehensive description of the competition, 
              including details on its cost, category (log analysis, volunerabilities etc ), type (Red, Blue, Jeopardy style, etc), duration of the event 
              (ongoing or specific time frame).
            </p>
            <div className="mt-6 ">
              {/* Name input field */}
              <div className="pb-4">
                <label
                  htmlFor="name"
                  className={`block font-latoBold text-sm pb-2 ${
                    formik.touched.name && formik.errors.name
                      ? "text-red-400"
                      : ""
                  } `}
                >
                  {formik.touched.name && formik.errors.name
                    ? formik.errors.name
                    : "Name"}
                </label>
                <p className="text-sm font-latoBold text-red-400 "></p>
                <input
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500 "
                  type="text"
                  name="name"
                  placeholder="Organnization name"
                  onChange={formik.handleChange}
                  value={formik.values.name}
                  onBlur={formik.handleBlur}
                  
                />
              </div>
              {/* Email input field */}
              <div className="pb-4">
                <label
                  htmlFor="email"
                  className={`block font-latoBold text-sm pb-2 ${
                    formik.touched.email && formik.errors.email
                      ? "text-red-400"
                      : ""
                  }`}
                >
                  {formik.touched.email && formik.errors.email
                    ? formik.errors.email
                    : "Email"}
                </label>

                <p></p>
                <input
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                  type="email"
                  name="email"
                  placeholder="email@sample.com"
                  onChange={formik.handleChange}
                  value={formik.values.email}
                  onBlur={formik.handleBlur}
                  
                />
              </div>
              {/* Country input field */}
              <div className="pb-4">
                <label
                  htmlFor="country"
                  className="block font-latoBold text-sm pb-2"
                >
                  Level
                </label>
                <select
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                  name="country"
                  onChange={formik.handleChange}
                  value={formik.values.country}
                >
                  <option>Beginner</option>
                  <option>Intermediate</option>
                  <option>Advanced</option>
                </select>
              </div>
              <div className="pb-4">
                <label
                  htmlFor="country"
                  className="block font-latoBold text-sm pb-2"
                >
                  Mode
                </label>
                <select
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                  name="country"
                  onChange={formik.handleChange}
                  value={formik.values.country}
                >
                  <option>Online</option>
                  <option>In-Person</option>
                </select>
              </div>
              <div className="pb-4">
                <label
                  htmlFor="country"
                  className="block font-latoBold text-sm pb-2"
                >
                  Competition Type
                </label>
                <select
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                  name="country"
                  onChange={formik.handleChange}
                  value={formik.values.country}
                >
                  <option>Red</option>
                  <option>Blue</option>
                  <option>CTF</option>
                  <option>Jeopardy Style</option>
                  <option>Forensics</option>
                  <option>Bug Bounty</option>
                  <option>Hackathon</option>
                  <option>Attack-Defense</option>
                </select>
              </div>
              
              <div className="pb-4">
              <label className="block font-latoBold text-sm pb-2">Skill Area</label>
                <div
                      className="cursor-pointer text-sm border border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                      onClick={toggleOptions}
                    >
                      {formik.values.selectedOptions.length > 0
                        ? formik.values.selectedOptions.join(", ")
                        : "Select Skill(s)"}
                    </div>
                    {showOptions && (
                      <div>
                        {options.map((option) => (
                          <div key={option} className="flex items-center">
                            <input
                              type="checkbox"
                              id={option}
                              name="selectedOptions"
                              value={option}
                              onChange={formik.handleChange}
                              checked={formik.values.selectedOptions.includes(option)}
                            />
                            <label htmlFor={option} className="text-sm">
                              {option}
                            </label>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
              </div>
              <div className="pb-4">
    </div>
              {/* Terms of service*/}
              <div className="pb-4">
                <label htmlFor="date" className="block font-latoBold text-sm pb-2">
                  Date of Event 
                </label>
                <input
                    type="date" 
                    id="date"
                    name="date"
                    className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                    onChange={formik.handleChange}
                    value={formik.values.date}
                    onBlur={formik.handleBlur}
                    
                />
              </div>
              <div className="pb-4">
                <label className="block font-latoBold text-sm pb-2">
                  Ongoing Event
                </label>
                  <input
                    type="checkbox"
                    id="ongoingEvent"
                    name="ongoingEvent"
                    className="mr-2"
                    value={formik.values.ongoingEvent}
                    onChange={(e) => formik.setFieldValue("ongoingEvent", e.target.checked)}
                />
                <label htmlFor="ongoingEvent" className="text-sm">
                  Select if is an ongoing event
                </label>
              </div>
              <div className="pb-4">
                <label htmlFor="feeType" className="block font-latoBold text-sm pb-2">
                  Event Cost
                </label>
                <select
                  name="feeType"
                  className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                  onChange={formik.handleChange}
                  value={formik.values.feeType}
                >
                  <option value="Free">Free</option>
                  <option value="Paid">Fee</option>
                </select>
              </div>

              {/* Conditional input for cost amount */}
              {formik.values.feeType === "Paid" && (
                <div className="pb-4">
                  <label htmlFor="costAmount" className="block font-latoBold text-sm pb-2">
                    Cost Amount
                  </label>
                  <input
                    type="number"
                    name="costAmount"
                    className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus-border-teal-500 focus:ring-teal-500"
                    onChange={formik.handleChange}
                    value={formik.values.costAmount}
                  />
                </div>
              )}

              <div className="pb-4">
              <label htmlFor="description" className="block font-latoBold text-sm pb-2">
              Description
              </label>
                  <textarea
                    id="description"
                    name="description"
                    rows="4"
                    placeholder="Enter a description..."
                    className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                    onChange={(e) => setDescription(e.target.value)}
                    value={description} 
                  ></textarea>
                </div>
                <div className="pb-4">
                <label htmlFor="photo" className="block font-latoBold text-sm pb-2">
                  Logo Upload (.jpg, .jpeg, .png)
                </label>
                  <input
                    type="file"
                    id="photo"
                    name="photo"
                    accept=".jpg, .jpeg, .png"
                    className="border-2 border-gray-500 p-2 rounded-md w-1/2 focus:border-teal-500 focus:ring-teal-500"
                    onChange={(event) => {
                      formik.setFieldValue("photo", event.currentTarget.files[0]);
                    }}
                    onBlur={formik.handleBlur}
                     
                />
              </div>
              <button
                type="submit"
                className={`bg-teal-500 font-latoBold text-sm text-white py-3 mt-6 rounded-lg w-full ${
                    !(formik.isValid && formik.dirty) ? "opacity-50 cursor-not-allowed" : ""
                }`}
                style={{ backgroundColor: 'rgb(20, 184, 166)' }}
                >
                Submit
                </button>
                </div>
        </form>
      </main>
    </m.div>
    </FormLayout>
  );
}
